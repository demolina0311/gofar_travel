-- Punto 1
-- PARA SUPLIR LA NECESIDAD DEL CLIENTE DE HACER UN SEGUIMIENTO A LOS VEHICULOS SE CREA UNA VISTA DE LA TABLA INVOICES
-- YA QUE EN ESTA TABLA ESTA EL ID DEL VEHICULO Y LA FECHA CUANDO CAMBIO DE ESTADO.
CREATE OR REPLACE VIEW historical_data_for_vehicles 
AS 
SELECT I.VEHICLE_ID AS VEHICLE, V.TYPE, I.DATE_INVOICE, I.ID AS INVOICE FROM INVOICES I INNER JOIN VEHICLES V ON I.VEHICLE_ID = V.ID 
UNION
SELECT I.VEHICLE_EXCHANGED_ID AS VEHICLE, V.TYPE, I.DATE_INVOICE, I.ID AS INVOICE  FROM INVOICES I INNER JOIN VEHICLES V ON I.vehicle_exchanged_id = V.ID
UNION
SELECT ID , TYPE, NULL, NULL  FROM VEHICLES WHERE TYPE = 'NEW';

SELECT * FROM HISTORICAL_DATA_FOR_VEHICLES

-- CREAR CONSTRAINTS AL CAMPO TYPE DE LA TABLA VEHICLES
ALTER TABLE VEHICLES ADD CONSTRAINT CK_TYPE
      CHECK (TYPE IN ('NEW','TRADE','SOLD'));


-- Punto 2      
-- AGREGAR UNA COLUMNA A LA TABLA ITEMS QUE TENGA POR DEFECTO EL VALOR DE 30
ALTER TABLE ITEMS ADD (units_available INT DEFAULT 30 NOT NULL);


-- Punto 3
-- VISTA CON ITEMS MENORES A 5, no se agregan las columnas código y nombre del fabricante porque la tabla no las posee
CREATE OR REPLACE VIEW under_five_units_availables 
AS 
SELECT ID, DESCRIPTION FROM ITEMS WHERE units_available < 5;

SELECT * FROM UNDER_FIVE_UNITS_AVAILABLES;



--Punto 4. 
--Create a trigger which decreases the number of units available after the 
--product has been associated to one bill.(0.5)

CREATE OR REPLACE TRIGGER DECREASE_UNITS_FROM_ITEMS_AFTER_CREATE_INVOICE_DETAIL
  AFTER INSERT 
  ON INVOICES_DETAIL
DECLARE
BEGIN
  
  UPDATE ITEMS 
  SET UNITS_AVAILABLE = (UNITS_AVAILABLE - (SELECT QUANTITY 
              FROM invoices_detail 
              WHERE ID = (SELECT MAX(ID) FROM invoices_detail)))
  WHERE ID = (SELECT  ITEM_ID
              FROM invoices_detail 
              WHERE ID = (SELECT MAX(ID) FROM invoices_detail));
END;

--Test for exec de trigger.
DECLARE
  invoices_id number;
  invoices_detail_id number;
BEGIN
  ------------------------
  --Insert a new invoices.
  ------------------------
  
  --Get the last ID + 1 from invoices.
  select (max(ID) + 1) into invoices_id from invoices;
  
  --Insert the new invoice with the new ID.
  INSERT INTO invoices (id, DATE_INVOICE, STATE_INVOICE, customer_id, vehicle_id, 
    seller_id, cost_vehicle, cost_exchanged, cost_items, tax, fee, 
    cost_without_vat, net_cost) 
  VALUES (invoices_id, '15112017', 'Pending', 5, 41, 9, 
    56917, NULL, 50774, 6609, 360, NULL, NULL);

  -------------------------------
  --Insert a new invoices detail.
  -------------------------------
  
  --Get the last ID from invoices.
  select (max(ID)) into invoices_id from invoices;
  
  --Get the last ID + 1 from invoices detail.
  select (max(ID) + 1) into invoices_detail_id from invoices_detail;
  
  --Insert the invoices detail.
  INSERT INTO invoices_detail (id, invoice_id, item_id, QUANTITY, cost_items) 
  VALUES (invoices_detail_id, invoices_id, 1, 1, '6677');
  
  --Get the last ID + 2 from invoices detail.
  select (max(ID) + 2) into invoices_detail_id from invoices_detail;
  --Insert the invoices detail.
  INSERT INTO invoices_detail (id, invoice_id, item_id, QUANTITY, cost_items) 
  VALUES (invoices_detail_id, invoices_id, 3, 1, '6677');
  
  --Get the last ID + 3 from invoices detail.
  select (max(ID) + 3) into invoices_detail_id from invoices_detail;
  --Insert the invoices detail.
  INSERT INTO invoices_detail (id, invoice_id, item_id, QUANTITY, cost_items) 
  VALUES (invoices_detail_id, invoices_id, 5, 1, '6677');
  
END;


--Punto 5. 
--Create a procedure called "reorder_units", inside the procedure you should call the view created in the
--step #3, for each element returned, the value of "units_available" should be increased in 20 units by
--default. (0.5)
CREATE OR REPLACE PROCEDURE reorder_units 
IS
  CURSOR XXX IS
    SELECT * FROM UNDER_FIVE_UNITS_AVAILABLES;
    
  ITEMS_ID NUMBER := -1;
  ITEM_DESCRIPTION VARCHAR(255);
  
BEGIN
  OPEN XXX;
  
    FETCH XXX INTO ITEMS_ID, ITEM_DESCRIPTION;
    
    IF (ITEMS_ID = -1) THEN
      DBMS_OUTPUT.PUT_LINE('NO SE OBTIENEN FILAS EN EL CURSOR. VERIFIQUE QUE LAS'||
        ' UNIDADES DISPONIBLES EN LA TABLA "ITMES" SEA MENOR QUE 5.');
    END IF;
    
    WHILE XXX %FOUND LOOP
      
      UPDATE ITEMS
      SET UNITS_AVAILABLE = (UNITS_AVAILABLE + 20)
      WHERE ID = ITEMS_ID;
      
      FETCH XXX INTO ITEMS_ID, ITEM_DESCRIPTION;
      
    END LOOP;
    
  CLOSE XXX;
END;

EXEC reorder_units();



--Punto 6.
--Create a view with the following columns (bill_id, sales_person_id, name_of_salesperson, client_id,
--name_of_client, vehicle_id, brand_of_vehicle, manufacturer_of_vehicle, accesory_id,
--name_of_accesory). The idea is you can add outside the view 'where bill_id = xx' and displays the
--information associated to a bill including its details (accessories). (0.5)

CREATE OR REPLACE VIEW bill_and_details AS
  SELECT DISTINCT 
        INVOICES.ID as "Invoice Id",  
  
         SELLERS.ID as "Seller Id", 
         SELLERS.FIRST_NAME as "Seller first name", 
         SELLERS.LAST_NAME as "Seller last name",
         
         CUSTOMERS.ID as "customer id", 
         CUSTOMERS.IDENTIFICATION as "Customer identification", 
         CUSTOMERS.FIRST_NAME as "Customer first name", 
         CUSTOMERS.LAST_NAME as "Customer last name",
         
         VEHICLES.ID as "Vehicle id",
         VEHICLES.NAME as "Vehicle name",
         
         MANUFACTURERS.NAME_MANUFACTURER as "Vehicle manufacturer",
         
         ITEMS.ID as "Accesory id", 
         ITEMS.DESCRIPTION as "Accesori name" 
         
  FROM INVOICES 
  INNER JOIN SELLERS ON INVOICES.SELLER_ID = SELLERS.ID 
  INNER JOIN CUSTOMERS ON INVOICES.CUSTOMER_ID = CUSTOMERS.ID 
  INNER JOIN VEHICLES ON INVOICES.VEHICLE_ID = VEHICLES.ID 
  --INNER JOIN EXCHANGED_VEHICLES ON EXCHANGED_VEHICLES.INVOICE_ID = INVOICES.ID 
  INNER JOIN MANUFACTURERS ON VEHICLES.MANUFACTURER_ID = MANUFACTURERS.ID 
  INNER JOIN INVOICES_DETAIL ON INVOICES_DETAIL.INVOICE_ID = INVOICES.ID 
  INNER JOIN ITEMS ON ITEM_ID = ITEMS.ID 
  WHERE INVOICES.ID = 5 
  ORDER BY INVOICES.ID;
  
  select * from bill_and_details;



